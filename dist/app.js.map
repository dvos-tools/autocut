{
  "version": 3,
  "sources": ["../src/background/background.ts", "../src/background/index.ts", "../src/app.ts", "../src/index.ts"],
  "sourcesContent": ["\n/*\n * BackgroundAgent is the background process runner. everything should inderectly go through this agent.\n * This Agent should never crash or recieve any fatal errors. If this agent gets in a state where \n * it seems broken. the Agent should *always* try to fix itself and repair its state.\n */\n\nexport class BackgroundAgent {\n\tpublic isRunning: boolean = false;\n\tprivate heartbeatInterval: NodeJS.Timeout | null = null;\n\tprivate errorCount: number = 0;\n\tprivate readonly maxErrors: number = 20;\n\tprivate readonly heartbeatIntervalMs: number = 60000; // 60 seconds\n\n\tconstructor() {\n\t\tthis.start = this.start.bind(this);\n\t\tthis.stop = this.stop.bind(this);\n\t\tthis.handleError = this.handleError.bind(this);\n\t\tthis.heartbeat = this.heartbeat.bind(this);\n\t}\n\n\t/**\n\t * Start the background process and its error handling\n\t */\n\tpublic start(): void {\n\t\tif (this.isRunning) return\n\t\tconsole.log('Starting BackgroundAgent...');\n\n\t\tthis.heartbeatInterval = setInterval(this.heartbeat, this.heartbeatIntervalMs);\n\t\tprocess.on('uncaughtException', this.handleError);\n\t\tprocess.on('unhandledRejection', this.handleError);\n\t\tprocess.on('SIGINT', this.stop);\n\t\tprocess.on('SIGTERM', this.stop);\n\n\t\tconsole.log('BackgroundAgent started successfully');\n\t\tthis.isRunning = true;\n\t}\n\n\tpublic stop(): void {\n\t\tif (!this.isRunning) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log('Stopping BackgroundAgent...');\n\t\tthis.isRunning = false;\n\n\t\t// Clear heartbeat interval\n\t\tif (this.heartbeatInterval) {\n\t\t\tclearInterval(this.heartbeatInterval);\n\t\t\tthis.heartbeatInterval = null;\n\t\t}\n\n\t\t// Remove event listeners\n\t\tprocess.removeListener('uncaughtException', this.handleError);\n\t\tprocess.removeListener('unhandledRejection', this.handleError);\n\t\tprocess.removeListener('SIGINT', this.stop);\n\t\tprocess.removeListener('SIGTERM', this.stop);\n\n\t\tconsole.log('BackgroundAgent stopped');\n\t}\n\n\t/**\n\t * Heartbeat handles error SLO's and log status\n\t */\n\tprivate heartbeat(): void {\n\t\tif (!this.isRunning) return;\n\n\t\tconst timestamp = new Date().toISOString();\n\t\tconsole.log(`[${timestamp}] BackgroundAgent heartbeat - Running for ${this.getUptime()}ms`);\n\t\t\n\t\t// Reset error count on successful heartbeat\n\t\tif (this.errorCount > 0) {\n\t\t\tconsole.log(`Error count reset from ${this.errorCount} to 0`);\n\t\t\tthis.errorCount = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Handles Errors grafully and tries to fix itself\n\t */\n\tprivate handleError(error: Error | string): void {\n\t\tthis.errorCount++;\n\t\tconst timestamp = new Date().toISOString();\n\t\t\n\t\tconsole.error(`[${timestamp}] BackgroundAgent error (${this.errorCount}/${this.maxErrors}):`, error);\n\n\t\t// If too many errors, restart the process\n\t\tif (this.errorCount >= this.maxErrors) {\n\t\t\tconsole.error(`Too many errors (${this.errorCount}), restarting BackgroundAgent...`);\n\t\t\tthis.restart();\n\t\t}\n\t}\n\n\tprivate restart(): void {\n\t\tconsole.log('Restarting BackgroundAgent...');\n\t\tthis.stop();\n\t\t\n\t\tsetTimeout(() => {\n\t\t\tthis.start();\n\t\t}, 1000);\n\t}\n\n\tprivate getUptime(): number {\n\t\treturn process.uptime() * 1000;\n\t}\n}\n\n", "import { BackgroundAgent } from \"src/background/background\"\n\n// Create the background agent instance\nexport const backgroundAgent = new BackgroundAgent();\n\n", "import { backgroundAgent } from \"src/background\";\n\n\nexport function InitApp(): void {\n\tconsole.log(\"Starting App\");\n\ttry {\n\t\tbackgroundAgent.start();\n\t\t\n\t\t// Keep the process alive\n\t\tprocess.on('exit', (code) => {\n\t\t\tconsole.log(`Process exiting with code: ${code}`);\n\t\t\tbackgroundAgent.stop();\n\t\t});\n\n\t\t// Handle graceful shutdown\n\t\tprocess.on('SIGINT', () => {\n\t\t\tconsole.log('Received SIGINT, shutting down gracefully...');\n\t\t\tbackgroundAgent.stop();\n\t\t\tprocess.exit(0);\n\t\t});\n\n\t\tprocess.on('SIGTERM', () => {\n\t\t\tconsole.log('Received SIGTERM, shutting down gracefully...');\n\t\t\tbackgroundAgent.stop();\n\t\t\tprocess.exit(0);\n\t\t});\n\n\t} catch (error) {\n\t\tconsole.error('Failed to start:', error);\n\t\tprocess.exit(1);\n\t}\n\n\tconsole.log('App started successfully');\n}\n\n", "#!/usr/bin/env node\n\nimport { InitApp } from \"src/app\"\n\nInitApp();\n\n"],
  "mappings": "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",
  "names": []
}
